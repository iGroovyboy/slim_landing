<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Installation</title>
    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl"
          crossorigin="anonymous">

</head>
<body class="container lg:mx-auto bg-light">

<main class="">
    <h1>Installation</h1>
    <hr>
    <form action="/api/db/check" method="post" name="install">
    {% if hasDb == false %}
        <h2 class="db-driver">Language</h2>
        <div class="row mb-3 db-driver">
            <div class="col-md-6 mb-3">
                <select class="form-select" name="language">
                    <option value="en">English</option>
                    <option value="ru">Русский</option>
                </select>
            </div>
        </div>

        <h2 class="db-driver">Database configuration</h2>
        <div class="row db-driver">
            <label>You can get this details from your hosting provider. Go with Sqlite if you're not sure.</label>
            <div class="col-md-6 mb-3">
                <select class="form-select col-md-6 " name="driver">
                    <option value="sqlite">Sqlite</option>
                    <option value="mysql">MySql</option>
                    <option value="pgsql">PostgreSQL</option>
                </select>
            </div>
        </div>

        <div class="row db-name">
            <div class="col-md-6 mb-3">
                <label for="">DB name*</label>
                <input class="form-control" type="text" name="dbname" placeholder="slimland">
            </div>
        </div>

        <div class="row db-credentials">
            <div class="col-md-6 mb-3">
                <label for="">DB user*</label>
                <input class="form-control" type="text" name="username">
            </div>

            <div class="col-md-6 mb-3">
                <label for="">DB password*</label>
                <input class="form-control" type="text" name="password">
            </div>
        </div>

        <div class="row db-details">
            <div class="col-md-6 mb-3">
                <label for="">DB host</label>
                <input class="form-control" type="text" name="host" placeholder="localhost">
            </div>

            <div class="col-md-6 mb-3">
                <label for="">DB port</label>
                <input class="form-control" type="text" name="port" placeholder="3306">
            </div>
        </div>

        <div class="row db-status mx-0"></div>

        <button id="checkDb" class="btn btn-primary mb-3" type="button">
            <span class="spinner spinner-border spinner-border-sm visually-hidden" role="status" aria-hidden="true"></span>
            Check connection
        </button>
    {% endif %}

        <div class="admin-credentials ">
            <h2>Admin credentials</h2>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="">Email</label>
                    <input class="form-control" type="email" name="admin_email" >
                </div>

                <div class="col-md-6 mb-3">
                    <label for="">Password</label>
                    <input class="form-control" type="password" name="admin_password" autocomplete="off" >
                </div>
            </div>
        </div>

        <div class="row admin-status mx-0"></div>

        <button id="submit" class="btn btn-primary mb-3 visually-hidden" type="submit">Submit</button>
    </form>

        <div class="row success-redirect mx-0 visually-hidden">
            <div >Basic setup complete! You can visit <a href="/">home</a> or <a href="{{ loginUrl }}">login</a> to admin dashboard now!</div>

        </div>
</main>

<script>
    let hasAdminEmail = false,
        hasAdminPass = false;
    const hidden = "visually-hidden";

    const btnCheckDB    = document.getElementById('checkDb'),
          checkDBLoader = document.querySelector('span.spinner'),
          checkDBstatus = document.querySelector('.db-status'),
          selectDriver  = document.querySelector('select[name="driver"]'),
          dbPort        = document.querySelector('input[name="port"]'),

          dbDriver      = document.querySelectorAll('.db-driver'),
          dbName        = document.querySelector('.db-name'),
          dbCredentials = document.querySelector('.db-credentials'),
          dbDetails     = document.querySelector('.db-details'),

          adminForm     = document.querySelector('div.admin-credentials'),
          adminEmail    = document.querySelector('input[name="admin_email"]'),
          adminPass     = document.querySelector('input[name="admin_password"]'),
          adminStatus   = document.querySelector('div.admin-status'),

          redirectAfterSuccess = document.querySelector('div.success-redirect'),

          btnSubmit     = document.getElementById('submit');

    if (btnCheckDB) {
      btnCheckDB.addEventListener('click', checkDb);
    }
    async function checkDb(e) {
        checkDBLoader.classList.remove(hidden);

        let dbData = {};

        const formData = new FormData(document.forms.install)
        for (var key of formData.keys()) {
           dbData[key] = formData.get(key);
        }

        let response = await fetch('/api/install/db_check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify(dbData)
        });

        let result = await response.json();

        checkDBLoader.classList.add(hidden);
        status = result.error ? 0 : 1;
        notice(result.message, checkDBstatus, status);
        if(status){
            [].forEach.call(dbDriver, el => {
                el.classList.add(hidden);
            });

            dbName.classList.add(hidden);
            dbCredentials.classList.add(hidden);
            dbDetails.classList.add(hidden);
            btnCheckDB.classList.add(hidden);

            adminForm.classList.remove(hidden);
            btnSubmit.classList.remove(hidden);
        }
    }

    btnSubmit.addEventListener('click', function (e) {
        e.preventDefault();
        const data = {
            'admin_email': adminEmail.value,
            'admin_password': adminPass.value,
        };

        fetch('/api/install/add_admin', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify(data)
        })
        .then(result => result.json())
        .then(result => {
            console.log(result);

            status = result.error ? 0 : 1;
            notice(result.message, adminStatus, status);

            if (result.success) {
                btnSubmit.classList.add(hidden);
                adminForm.classList.add(hidden);
                redirectAfterSuccess.classList.remove(hidden);
            }
        });
    });

    adminEmail.addEventListener('keyup', function (e) {
        hasAdminEmail = !e.target.validity.typeMismatch;

        if (hasAdminEmail && hasAdminPass){
            btnSubmit.classList.remove(hidden);
        }
    });

    adminPass.addEventListener('keyup', function (e) {
        hasAdminPass = e.target.value.length >= 3;

        if (hasAdminEmail && hasAdminPass){
            btnSubmit.classList.remove(hidden);
        }
    });

    if (selectDriver) {
      selectDriver.addEventListener('change', changeDriver);
    }
    function changeDriver(e) {
        const option = e.target.selectedOptions[0].value;
        switch (option) {
            case 'mysql':
                port = 3306;
                dbName.classList.remove(hidden);
                dbCredentials.classList.remove(hidden);
                dbDetails.classList.remove(hidden);
                break;
            case 'pgsql':
                port = 5432;
                dbName.classList.remove(hidden);
                dbCredentials.classList.remove(hidden);
                dbDetails.classList.remove(hidden);
                break;
            case 'sqlite':
                port = '';
                dbName.classList.add(hidden);
                dbCredentials.classList.add(hidden);
                dbDetails.classList.add(hidden);
        }

        dbPort.setAttribute('placeholder', port);
    }

    Window.onLoad = (() => {
        if (selectDriver) {
            driver = selectDriver.selectedOptions[0].value;
            port   = getDbPort(driver);

            if('sqlite' === driver){
                dbName.classList.add(hidden);
                dbCredentials.classList.add(hidden);
                dbDetails.classList.add(hidden);
            } else {
                dbName.classList.remove(hidden);
                dbCredentials.classList.remove(hidden);
                dbDetails.classList.remove(hidden);
            }
        }
    })();

    function getDbPort(driver) {
        if('mysql' === driver) {
            return 3306;
        } else if('pgsql' === driver){
            return 5432;
        } else {
            return null;
        }
    }

    function notice(message, parent, status = 0) {
        const statuses = {
            0: 'danger',
            1: 'success'
        }
        html = `<div class="alert alert-${statuses[status]} alert-dismissible fade show" role="alert">${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>
        `;
        parent.innerHTML = html;
    }
</script>
</body>
</html>
